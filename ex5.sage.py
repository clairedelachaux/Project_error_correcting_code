

# This file was *autogenerated* from the file ex5.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_10 = Integer(10); _sage_const_0p05 = RealNumber('0.05'); _sage_const_500 = Integer(500)
from main.sage import *

def T(j, l, w, n, q):
    if l+j<w or l+w<j or w+j<l:
        return _sage_const_0 
    else:
        return sum(binomial(w, z)*binomial(w-z, z+j-l)*(q-_sage_const_2 )**(l+w-j-_sage_const_2 *z)*binomial(n-w, n-j-z)*(q-_sage_const_1 )**(j+z-w) for z in range(_sage_const_0 , w+_sage_const_1 ))

def A(w, n, k, q):
    if w == _sage_const_0 :
        return _sage_const_1 
    elif w < n-k+_sage_const_1 :
        return _sage_const_0 
    else:
        return binomial(n, w)*sum((-_sage_const_1 )**j*binomial(w, j)*(q**(w-(n-k)-j)-_sage_const_1 ) for j in range(_sage_const_0 , w-(n-k+_sage_const_1 )+_sage_const_1 ))

def P_error(n , k, q, p):
    t = (n-k)//_sage_const_2 
    return sum((p/(q-_sage_const_1 ))**j*(_sage_const_1 -p)**(n-j)*sum(A(w, n, k, q)*sum(T(j, l, w, n, q) for l in range (_sage_const_0 , t+_sage_const_1 )) for w in range (_sage_const_1 , n+_sage_const_1 )) for j in range (t+_sage_const_1 , n+_sage_const_1 ))


n=_sage_const_16 
k=_sage_const_10 
p=_sage_const_0p05 
q=_sage_const_16 
t = (n-k)//_sage_const_2 

P1 = P_error(n, k, q, p)

# print(P1)

def sim(iterations, k):
    # counters of errors and failures
    errors = _sage_const_0 
    failures = _sage_const_0 

    # create code with k as input
    [encoder, decoder] = createCode(k)
    
    for i in range(iterations):
        # create random message
        m = vector(F, [F.random_element() for i in range(k)])

        # encode message
        c = encoder(m)

        # create error with computed error distribution and recieved word
        e = vector(F, [F.random_element() if error_dist.get_random_element()==_sage_const_0  else _sage_const_0  for i in range(n)])
        if i % _sage_const_500  == _sage_const_0 :
            print("iteration:", i, "\t decoding failures so far:", failures, "\t decoding errors so far:", errors)
        r = c + e

        # decode recieved word
        f = decoder(r)

        # check if sent word and recieved word is the same
        if not list(m) == list(f)+[_sage_const_0 ]*(len(m)-len(list(f))):
            failures += _sage_const_1 
            if not f == "fail": 
                errors += _sage_const_1 
                print("Oh no! Error at iteration", i)
                print("\t Hamming weight of current error vector: ", e.hamming_weight())
            else: 
                print("Phew! Just a failure at iteration", i)
                print("\t Hamming weight of current error vector: ", e.hamming_weight())
    return [failures, errors]



